

Python solution:

# test_login.py from selenium import webdriver from selenium.webdriver.common.keys import Keys from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC from rqwalton.validator import validateLogin try: driver = webdriver.Chrome() driver.get(‘http://selenium-code.com/registration’) WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, ‘[@id=\"form-username\"]’))) WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, ‘[@id=\"form-password\"]’))) element = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ‘[@value= \"Register\"]’))) WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ‘[@id= \"password\"]’))) element = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ‘[@id= \"username\"]’))) driver.find_element_by_id(‘username’).send_keys(‘rgwalton’) driver.find_element_by_id(‘password’).send_keys(‘password’) WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ‘[@id= \"login\"]’))) WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ‘[@id= \"openid\"]’))) element = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ‘[@id= \"loginbtn\"]’))) WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ‘[@value= \"Login\"]’))) WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ‘[@id= \"login_error\"]’))) WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, ‘[@id= \"xko_form_fname_invalid\"]’))) page.driver.find_element_by_id(‘username’).clear page.driver.find_element_by_id(‘password’).clear page.driver.find_element_by_id(‘login’).click() page.driver.find_element_by_id(‘openid’).click() page.driver.find_element_by_id(‘loginbtn’).click() element = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ‘[@value= \"Register\"]’))) element = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ‘[@id= \"page_not_found\"]’))) WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, ‘[@id= \"user\"]’))) WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ‘[@id= \"page_not_found\"]’))) print(‘\n Settings to validate the web login page \(fill in link name to be validated).

’) print(‘\n Open the WebDriver console, go to about:support page and click on the WebDriver options link.’) print(‘\n Change strict contexts: to Ignore.

’) print(‘\n Reload the page.’) print(‘\n Run the test.’) if __name__ == ‘__main__’: validateLogin(driver, WebDriverWait(driver, 10).until(EC.title_present(‘WebDriver options - Google Chrome’)))

WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, ‘[@value= \"Register\"]’)))

WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, ‘[@id= \"page_not_found\"]’)))

WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ‘[@id= \"user\"]’)))

line 1 – This imports the webdriver package, while line 2 imports the WebDriverWait within the WebDriver package to set up a 10 second delay before executing the next statement.

line 3- WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ‘[@id= \"page_not_found\"]’))) – This command opens up Google Chrome with a 10 second wait time until it finds the WebDriver page with the defined CSS selector on the new page.

line 4 – This command is used to find the button with the attribute value of register and WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ‘[@id= \"page_not_found\"]’))) – This command is used to find the button with the attribute value of register and ensure that the new page is loaded and available.

The next steps may vary based on the Firefox, Internet Explorer or Chrome browsers that are being used; therefore it is important to make the necessary updates to ensure that the test suite runs smoothly.


Setting up a comprehensive test


This section outlines a ‘test_login_comprehensive.py’ file example. Not only does it test the conditions that were presented in the previous Python example, but it also tests for the presence of functional web elements under many different scenarios.


state = {} def validateLogin(driver, state): driver.getcurrent_url = ‘http://selenium-code.com/registration’ driver.findElement(By.id = "email").clear() driver.findElement(By.id = = "email").sendKeys('contact@haratford.com') driver.findElement(By.id = = = = = "form-email").sendKeys('joe1@amazon.com') driver.findElement(By.id = "email").clear() driver.findElement(By.id = = "email").sendKeys('contact@haratford.com') driver.findElement(By.id = = "form-email").sendKeys('joe@yahoo.com') driver.findElement(By.id = "email").clear() driver.findElement(By.id = = "email").sendKeys('contact@